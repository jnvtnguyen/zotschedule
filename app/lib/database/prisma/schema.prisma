generator client {
  provider  = "prisma-kysely"
  output    = "../"
  fileName  = "generated-types.ts"
  camelCase = true
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Department {
  code  String @id
  title String

  courses Course[]

  @@map("departments")
}

model Course {
  id                String     @id
  number            String
  title             String
  description       String
  repeatability     String?
  concurrent_with   String[]
  grading_option    String?
  same_as           String[]
  restriction       String?
  overlaps_with     String[]
  corequisite       String?
  school            String?
  /// @kyselyType(ColumnType<[number, number], string, string>)
  units             Json
  ges               String[]
  terms             String[]
  department        Department @relation(fields: [department_code], references: [code])
  department_code   String
  /// @kyselyType(ColumnType<import('@/lib/uci/prerequisites/types').PrerequisiteTree, string, string>)
  prerequisite_tree Json

  @@map("courses")
}

model TermCalendar {
  term                          String   @id
  schedule_of_classes_available DateTime
  instruction_begins            DateTime
  instruction_ends              DateTime
  finals_begin                  DateTime
  finals_end                    DateTime

  @@map("term_calendars")
}

model User {
  id         String        @id @default(dbgenerated("gen_random_uuid()"))
  name       String
  email      String        @unique
  password   String
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  sessions   UserSession[]
  schedules  Schedule[]

  @@map("users")
}

model UserSession {
  id String @id @default(uuid())

  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expires_at DateTime

  @@map("user_sessions")
}

model Schedule {
  id         String  @id @default(dbgenerated("gen_random_uuid()"))
  name       String
  is_default Boolean
  show_weekends Boolean
  /// @kyselyType(ColumnType<import('@/lib/hooks/use-schedule-calendar.tsx').View, string, string>)
  view        String

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  course_events CourseScheduleEvent[]
  custom_events CustomScheduleEvent[]

  @@map("schedules")
}

model CourseScheduleEvent {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  schedule_id String
  schedule    Schedule @relation(fields: [schedule_id], references: [id], onDelete: Cascade)
  section_code Int
  term String
  color String

  @@map("course_schedule_events")
}

enum CustomScheduleEventRepeatability {
  NONE
  DAILY
  WEEKLY
  WEEKDAY
  MONTHLY
  CUSTOM
}

model CustomScheduleEvent {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  schedule_id String
  schedule    Schedule @relation(fields: [schedule_id], references: [id], onDelete: Cascade)
  title String
  description String
  start DateTime @db.Timestamptz()
  end DateTime @db.Timestamptz()
  color String
  repeatability CustomScheduleEventRepeatability
  /// @kyselyType(ColumnType<import('@/lib/uci/events/types').Recurrence, string, string>)
  recurrence Json?

  @@map("custom_schedule_events")
}

model SearchAlias {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  alias String
  value String

  @@map("search_aliases")
}
