/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AuthImport } from "./routes/auth";
import { Route as IndexImport } from "./routes/index";
import { Route as CoursesIndexImport } from "./routes/courses/index";
import { Route as CoursesCourseIdImport } from "./routes/courses/$courseId";
import { Route as CoursesCourseIdPrerequisitesImport } from "./routes/courses/$courseId.prerequisites";
import { Route as CoursesCourseIdOfferingsImport } from "./routes/courses/$courseId.offerings";

// Create/Update Routes

const AuthRoute = AuthImport.update({
  path: "/auth",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const CoursesIndexRoute = CoursesIndexImport.update({
  path: "/courses/",
  getParentRoute: () => rootRoute,
} as any);

const CoursesCourseIdRoute = CoursesCourseIdImport.update({
  path: "/courses/$courseId",
  getParentRoute: () => rootRoute,
} as any);

const CoursesCourseIdPrerequisitesRoute =
  CoursesCourseIdPrerequisitesImport.update({
    path: "/prerequisites",
    getParentRoute: () => CoursesCourseIdRoute,
  } as any);

const CoursesCourseIdOfferingsRoute = CoursesCourseIdOfferingsImport.update({
  path: "/offerings",
  getParentRoute: () => CoursesCourseIdRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/auth": {
      id: "/auth";
      path: "/auth";
      fullPath: "/auth";
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    "/courses/$courseId": {
      id: "/courses/$courseId";
      path: "/courses/$courseId";
      fullPath: "/courses/$courseId";
      preLoaderRoute: typeof CoursesCourseIdImport;
      parentRoute: typeof rootRoute;
    };
    "/courses/": {
      id: "/courses/";
      path: "/courses";
      fullPath: "/courses";
      preLoaderRoute: typeof CoursesIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/courses/$courseId/offerings": {
      id: "/courses/$courseId/offerings";
      path: "/offerings";
      fullPath: "/courses/$courseId/offerings";
      preLoaderRoute: typeof CoursesCourseIdOfferingsImport;
      parentRoute: typeof CoursesCourseIdImport;
    };
    "/courses/$courseId/prerequisites": {
      id: "/courses/$courseId/prerequisites";
      path: "/prerequisites";
      fullPath: "/courses/$courseId/prerequisites";
      preLoaderRoute: typeof CoursesCourseIdPrerequisitesImport;
      parentRoute: typeof CoursesCourseIdImport;
    };
  }
}

// Create and export the route tree

interface CoursesCourseIdRouteChildren {
  CoursesCourseIdOfferingsRoute: typeof CoursesCourseIdOfferingsRoute;
  CoursesCourseIdPrerequisitesRoute: typeof CoursesCourseIdPrerequisitesRoute;
}

const CoursesCourseIdRouteChildren: CoursesCourseIdRouteChildren = {
  CoursesCourseIdOfferingsRoute: CoursesCourseIdOfferingsRoute,
  CoursesCourseIdPrerequisitesRoute: CoursesCourseIdPrerequisitesRoute,
};

const CoursesCourseIdRouteWithChildren = CoursesCourseIdRoute._addFileChildren(
  CoursesCourseIdRouteChildren,
);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/auth": typeof AuthRoute;
  "/courses/$courseId": typeof CoursesCourseIdRouteWithChildren;
  "/courses": typeof CoursesIndexRoute;
  "/courses/$courseId/offerings": typeof CoursesCourseIdOfferingsRoute;
  "/courses/$courseId/prerequisites": typeof CoursesCourseIdPrerequisitesRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/auth": typeof AuthRoute;
  "/courses/$courseId": typeof CoursesCourseIdRouteWithChildren;
  "/courses": typeof CoursesIndexRoute;
  "/courses/$courseId/offerings": typeof CoursesCourseIdOfferingsRoute;
  "/courses/$courseId/prerequisites": typeof CoursesCourseIdPrerequisitesRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/auth": typeof AuthRoute;
  "/courses/$courseId": typeof CoursesCourseIdRouteWithChildren;
  "/courses/": typeof CoursesIndexRoute;
  "/courses/$courseId/offerings": typeof CoursesCourseIdOfferingsRoute;
  "/courses/$courseId/prerequisites": typeof CoursesCourseIdPrerequisitesRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/auth"
    | "/courses/$courseId"
    | "/courses"
    | "/courses/$courseId/offerings"
    | "/courses/$courseId/prerequisites";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/auth"
    | "/courses/$courseId"
    | "/courses"
    | "/courses/$courseId/offerings"
    | "/courses/$courseId/prerequisites";
  id:
    | "__root__"
    | "/"
    | "/auth"
    | "/courses/$courseId"
    | "/courses/"
    | "/courses/$courseId/offerings"
    | "/courses/$courseId/prerequisites";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRoute: typeof AuthRoute;
  CoursesCourseIdRoute: typeof CoursesCourseIdRouteWithChildren;
  CoursesIndexRoute: typeof CoursesIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  CoursesCourseIdRoute: CoursesCourseIdRouteWithChildren,
  CoursesIndexRoute: CoursesIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/courses/$courseId",
        "/courses/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/courses/$courseId": {
      "filePath": "courses/$courseId.tsx",
      "children": [
        "/courses/$courseId/offerings",
        "/courses/$courseId/prerequisites"
      ]
    },
    "/courses/": {
      "filePath": "courses/index.tsx"
    },
    "/courses/$courseId/offerings": {
      "filePath": "courses/$courseId.offerings.tsx",
      "parent": "/courses/$courseId"
    },
    "/courses/$courseId/prerequisites": {
      "filePath": "courses/$courseId.prerequisites.tsx",
      "parent": "/courses/$courseId"
    }
  }
}
ROUTE_MANIFEST_END */
